// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend;

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210918130339_seedData")]
    partial class seedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressText = "Tollefsengrenda 475, 0946 Mandal"
                        },
                        new
                        {
                            Id = 2,
                            AddressText = "Søndreskrenten 33B, 4326 Stathelle"
                        },
                        new
                        {
                            Id = 3,
                            AddressText = "Gamlestubben 8288, 0899 Moelv"
                        },
                        new
                        {
                            Id = 4,
                            AddressText = "Nedrehaugen 4855, 1093 Kirkenes"
                        },
                        new
                        {
                            Id = 5,
                            AddressText = "Lunde veien 3717, 0088 Hønefoss "
                        },
                        new
                        {
                            Id = 6,
                            AddressText = "Gamleåsen 40, 8565 Namsos "
                        });
                });

            modelBuilder.Entity("backend.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrentAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAddressId");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentAddressId = 1,
                            Email = "asdf@b.com",
                            FirstName = "Ola",
                            LastName = "Nordman"
                        },
                        new
                        {
                            Id = 2,
                            CurrentAddressId = 2,
                            Email = "gggs@gda.com",
                            FirstName = "Svein",
                            LastName = "Lund"
                        },
                        new
                        {
                            Id = 3,
                            CurrentAddressId = 2,
                            Email = "kasdf@g.com",
                            FirstName = "knut",
                            LastName = "Sørlig"
                        });
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FromAddressId")
                        .HasColumnType("int");

                    b.Property<string>("OrderComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ToAddressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromAddressId");

                    b.HasIndex("ToAddressId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            FromAddressId = 1,
                            OrderComment = "ikke kom før kl 10",
                            ToAddressId = 2
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            FromAddressId = 3,
                            OrderComment = "kom etter kl 15",
                            ToAddressId = 3
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            FromAddressId = 4,
                            OrderComment = "kom etter kl 15",
                            ToAddressId = 2
                        });
                });

            modelBuilder.Entity("backend.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            ServiceTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1,
                            ServiceTypeId = 3
                        });
                });

            modelBuilder.Entity("backend.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceTypeDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ServiceTypeDescription = "Moving your belongings to your new address",
                            ServiceTypeName = "Moving"
                        },
                        new
                        {
                            Id = 2,
                            ServiceTypeDescription = "Packing up your belongings",
                            ServiceTypeName = "Packing"
                        },
                        new
                        {
                            Id = 3,
                            ServiceTypeDescription = "Cleaning your old home",
                            ServiceTypeName = "Cleaning"
                        });
                });

            modelBuilder.Entity("backend.Models.Customer", b =>
                {
                    b.HasOne("backend.Models.Address", "CurrentAddress")
                        .WithMany()
                        .HasForeignKey("CurrentAddressId");

                    b.Navigation("CurrentAddress");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.HasOne("backend.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Address", "FromAddress")
                        .WithMany()
                        .HasForeignKey("FromAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Address", "ToAddress")
                        .WithMany()
                        .HasForeignKey("ToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FromAddress");

                    b.Navigation("ToAddress");
                });

            modelBuilder.Entity("backend.Models.Service", b =>
                {
                    b.HasOne("backend.Models.Order", "Order")
                        .WithMany("Services")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
